# CUDA_VISIBLE_DEVICES=0,1 python create_heatmaps.py --config config_template.yaml
--- 
exp_arguments:
  # number of classes
  n_classes: 4
  # name tag for saving generated figures and assets
  save_exp_code: TMA
  # where to save raw asset files
  raw_save_dir: /local/data3/chrsp39/DPD-AI/Heatmaps/heatmap_raw_results
  # where to save final heatmaps
  production_save_dir: /local/data3/chrsp39/DPD-AI/Heatmaps/heatmap_production_results
  batch_size: 256
data_arguments: 
  # where is data stored; can be a single str path or a dictionary of key, data_dir mapping
  data_dir: /local/data3/chrsp39/DPD-AI/TMA
  # column name for key in data_dir (if a dict mapping is used)
  data_dir_key: slide_id
  # csv list containing slide_ids (can additionally have seg/patch paramters, class labels, etc.)
  process_list: /local/data3/chrsp39/DPD-AI/Heatmaps/heatmaps.csv
  # preset file for segmentation/patching
  preset: /local/data1/chrsp39/Pancreas_Cancer_Deep_Learning_DPD_Images_Analysis/models/CLAM/presets/cbtn.csv
  # file extention for slides
  slide_ext: .svs
  # label dictionary for str: interger mapping (optional)
  label_dict:
    0: 0
    1: 1
    2: 2
    3: 3               
patching_arguments:
  # arguments for patching
  patch_size: 224
  overlap: 0.5
  patch_level: 0
  custom_downsample: 1
encoder_arguments:
  # arguments for the pretrained encoder model
  model_name:  # currently support: conch_v1, conch_v1_5
  target_img_size: 224 # resize images to this size before feeding to encoder
model_arguments: 
  # arguments for initializing model from checkpoint
  ckpt_path: /local/data1/chrsp39/Pancreas_Cancer_Deep_Learning_DPD_Images_Analysis/models/CLAM/results/
  model_type: clam_sb # options: clam_sb, clam_mb, mil, abmil
  initiate_fn: initiate_model # see utils/eval_utils/
  model_size: small # options: small, big (only for clam_sb, clam_mb)
  drop_out: 0.
  embed_dim:  # conch_v1 512, conchv1_5 768
heatmap_arguments:
  # downsample at which to visualize heatmap (-1 refers to downsample closest to 32x downsample)
  vis_level: 1
  # transparency for overlaying heatmap on background (0: background only, 1: foreground only)
  alpha: 1
  # whether to use a blank canvas instead of original slide
  blank_canvas: true
  # whether to also save the original H&E image
  save_orig: true
  # file extension for saving heatmap/original image
  save_ext: jpg
  # whether to calculate percentile scores in reference to the set of non-overlapping patches
  use_ref_scores: false
  # whether to use gaussian blur for further smoothing
  blur: true
  # whether to shift the 4 default corner points for checking if a patch is inside a foreground contour
  use_center_shift: true
  # whether to only compute heatmap for ROI specified by x1, x2, y1, y2
  use_roi: false 
  # whether to calculate heatmap with specified overlap (by default, coarse heatmap without overlap is always calculated)
  calc_heatmap: true
  # whether to binarize attention scores
  binarize: false
  # binarization threshold: (0, 1)
  binary_thresh: -1
  # factor for downscaling the heatmap before final dispaly
  custom_downsample: 1
  cmap: jet
sample_arguments:
  samples:
    - name: "topk_high_attention"
      sample: true
      seed: 1
      k: 15 # save top-k patches
      mode: topk